import uuid
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
import logging
from typing import Dict, Any
from services.cart_service import CartService
from services.payment_service import PaymentService
from repositories.order_repository import OrderExcelRepository
from config import REDIS_DSN

router = Router()
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CART_PREFIX = "cart"
REMOVE_FROM_CART_PREFIX = "remove_from_cart_"
CHECKOUT_CALLBACK = "checkout"
EMPTY_CART_MESSAGE = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
BACK_TO_CATALOG_TEXT = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É"
CATALOG_CALLBACK = "catalog"


class CartStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    viewing_cart = State()
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_phone = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
cart_service = CartService(REDIS_DSN)
payment_service = PaymentService()
order_repository = OrderExcelRepository("orders.xlsx")


@router.message(Command("cart"))
async def cart_command(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cart –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    await _show_cart(message, state, message.from_user.id)


@router.callback_query(F.data == CART_PREFIX)
async def show_cart_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    await _show_cart(callback.message, state, callback.from_user.id)
    await callback.answer()


async def _show_cart(message: Message, state: FSMContext, user_id: int) -> None:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    cart = await cart_service.get_cart(user_id)
    if cart.is_empty():
        kb = InlineKeyboardBuilder()
        kb.button(text="üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data=CATALOG_CALLBACK)
        kb.adjust(1)
        await message.answer(EMPTY_CART_MESSAGE, reply_markup=kb.as_markup())
        return

    response = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    kb = InlineKeyboardBuilder()
    for item in cart.items:
        response += (
            f"{item.product.name} x{item.quantity} - "
            f"{item.product.price * item.quantity:.2f} ‚ÇΩ\n"
        )
        kb.button(
            text=f"–£–¥–∞–ª–∏—Ç—å {item.product.name}",
            callback_data=f"{REMOVE_FROM_CART_PREFIX}{item.product.id}",
        )
    response += f"–ò—Ç–æ–≥–æ: {cart.get_total():.2f} ‚ÇΩ"
    kb.button(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=CHECKOUT_CALLBACK)
    kb.button(text=BACK_TO_CATALOG_TEXT, callback_data=CATALOG_CALLBACK)
    kb.adjust(1)
    await state.set_state(CartStates.viewing_cart)
    await message.answer(response, reply_markup=kb.as_markup())


@router.callback_query(F.data.startswith(REMOVE_FROM_CART_PREFIX))
async def remove_from_cart(callback: CallbackQuery, state: FSMContext) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ callback-–∑–∞–ø—Ä–æ—Å—É.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    parts = callback.data.split("_")
    try:
        product_id = int(parts[-1])
    except (IndexError, ValueError) as e:
        logger.error(f"Invalid callback data: {callback.data}, error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)
        return

    user_id = callback.from_user.id
    cart = await cart_service.get_cart(user_id)
    cart.remove_item(product_id)
    await cart_service.save_cart(user_id, cart)
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    await _show_cart(callback.message, state, user_id)


@router.callback_query(F.data == CHECKOUT_CALLBACK)
async def start_checkout(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑".
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    user_id = callback.from_user.id
    cart = await cart_service.get_cart(user_id)
    if cart.is_empty():
        await callback.message.edit_text(
            EMPTY_CART_MESSAGE, reply_markup=_back_to_catalog_kb()
        )
        return
    await state.set_state(CartStates.waiting_for_name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")


@router.message(StateFilter(CartStates.waiting_for_name), F.text)
async def process_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    await state.update_data(name=message.text)
    await state.set_state(CartStates.waiting_for_address)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")


@router.message(StateFilter(CartStates.waiting_for_address), F.text)
async def process_address(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    await state.update_data(address=message.text)
    await state.set_state(CartStates.waiting_for_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")


@router.message(StateFilter(CartStates.waiting_for_phone), F.text)
async def process_phone(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    user_id = message.from_user.id
    data = await state.get_data()
    cart = await cart_service.get_cart(user_id)
    total = cart.get_total()
    order = {
        "id": str(uuid.uuid4()),
        "user_id": user_id,
        "items": cart.items[:],
        "total": total,
        "name": data["name"],
        "address": data["address"],
        "phone": message.text,
        "status": "pending",
    }
    payment = await payment_service.create_payment(total, order["id"])
    order_repository.save_order(order)
    kb = InlineKeyboardBuilder()
    # kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment["confirmation"]["confirmation_url"])
    kb.button(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=CATALOG_CALLBACK)
    kb.button(text=BACK_TO_CATALOG_TEXT, callback_data=CATALOG_CALLBACK)
    await message.answer(
        f"–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! –°—É–º–º–∞: {total:.3f} ‚ÇΩ\n–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:",
        reply_markup=kb.as_markup(),
    )
    await cart_service.clear_cart(user_id)
    # await state.finish()


def _back_to_catalog_kb() -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥.

    Returns:
        InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥.
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data=CATALOG_CALLBACK)
    return kb.as_markup()


def register_handlers(dp) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞.
    """
    dp.include_router(router)