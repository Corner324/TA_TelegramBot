import uuid
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import logging
import httpx
from services.api_provider import api_provider as api
from services.cart_service import CartService  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CartService –Ω–∞–ø—Ä—è–º—É—é
from config import REDIS_DSN

router = Router()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–æ—Ä–∑–∏–Ω—ã
cart_service = CartService(REDIS_DSN)

class CatalogStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–º."""
    viewing_categories = State()
    viewing_subcategories = State()
    viewing_products = State()
    viewing_product = State()
    selecting_quantity = State()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CATEGORY_PREFIX = "category_"
SUBCATEGORY_PREFIX = "subcategory_"
PRODUCT_PREFIX = "product_"
PAGE_PREFIX = "page_"
BACK_TO_CATEGORIES = "back_to_categories"
BACK_TO_SUBCATEGORIES = "back_to_subcategories"
ADD_TO_CART = "add_to_cart_"
QUANTITY_PREFIX = "quantity_"
CONFIRM_ADD = "confirm_add_"
BACK_TO_MAIN = "main_menu"

@router.message(Command("catalog"))
async def catalog_command(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    categories = await api.catalog.get_categories()
    kb = InlineKeyboardBuilder()
    for category in categories:
        kb.button(text=category.name, callback_data=f"{CATEGORY_PREFIX}{category.id}")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=BACK_TO_MAIN)
    kb.adjust(2)
    await state.set_state(CatalogStates.viewing_categories)
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=kb.as_markup())

@router.callback_query(F.data == "catalog")
async def show_categories(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ callback-–∑–∞–ø—Ä–æ—Å—É.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    categories = await api.catalog.get_categories()
    kb = InlineKeyboardBuilder()
    for category in categories:
        kb.button(text=category.name, callback_data=f"{CATEGORY_PREFIX}{category.id}")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=BACK_TO_MAIN)
    kb.adjust(2)
    await state.set_state(CatalogStates.viewing_categories)
    await callback.message.edit_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=kb.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith(CATEGORY_PREFIX))
async def show_subcategories(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    category_id = int(callback.data.split("_")[1])
    await show_subcategories_helper(callback, state, category_id)

@router.callback_query(F.data.startswith(SUBCATEGORY_PREFIX))
async def show_products(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    subcategory_id = int(callback.data.split("_")[1])
    await _show_products_page(callback, state, subcategory_id, 1)

@router.callback_query(F.data.startswith(PAGE_PREFIX))
async def handle_pagination(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    parts = callback.data.split("_")
    subcategory_id = int(parts[1])
    page = int(parts[2])
    await _show_products_page(callback, state, subcategory_id, page)

async def _show_products_page(callback: CallbackQuery, state: FSMContext, subcategory_id: int, page: int) -> None:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
        subcategory_id: ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """
    products_data = await api.catalog.get_products(subcategory_id, page=page, limit=5)
    products = products_data["products"]
    total_pages = products_data["pages"]
    kb = InlineKeyboardBuilder()
    for product in products:
        kb.button(text=f"{product.name} - {product.price} ‚ÇΩ", callback_data=f"{PRODUCT_PREFIX}{product.id}")
    if page > 1:
        kb.button(text="‚óÄÔ∏è", callback_data=f"{PAGE_PREFIX}{subcategory_id}_{page-1}")
    kb.button(text=f"{page}/{total_pages}", callback_data="current_page")
    if page < total_pages:
        kb.button(text="‚ñ∂Ô∏è", callback_data=f"{PAGE_PREFIX}{subcategory_id}_{page+1}")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=BACK_TO_SUBCATEGORIES)
    kb.adjust(1)
    await state.update_data(subcategory_id=subcategory_id)
    await state.set_state(CatalogStates.viewing_products)
    await callback.message.delete()
    await callback.message.answer(f"üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Å—Ç—Ä. {page} –∏–∑ {total_pages}):", reply_markup=kb.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith(ADD_TO_CART))
async def select_quantity(callback: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É".
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    parts = callback.data.split("_")
    try:
        product_id = int(parts[-1])
    except (IndexError, ValueError) as e:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback.data: {callback.data}, –æ—à–∏–±–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞", show_alert=True)
        return
    await state.update_data(product_id=product_id)
    kb = InlineKeyboardBuilder()
    for i in range(1, 6):
        kb.button(text=str(i), callback_data=f"{QUANTITY_PREFIX}{product_id}_{i}")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{PRODUCT_PREFIX}{product_id}")
    kb.adjust(2)
    await state.set_state(CatalogStates.selecting_quantity)
    await callback.message.edit_caption(caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=kb.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith(QUANTITY_PREFIX))
async def confirm_quantity(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    parts = callback.data.split("_")
    try:
        product_id = int(parts[1])
        quantity = int(parts[2])
    except (IndexError, ValueError) as e:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback.data: {callback.data}, –æ—à–∏–±–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞", show_alert=True)
        return
    await state.update_data(quantity=quantity)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"{CONFIRM_ADD}{product_id}")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{PRODUCT_PREFIX}{product_id}")
    kb.adjust(1)
    await callback.message.edit_caption(
        caption=f"–î–æ–±–∞–≤–∏—Ç—å {quantity} —à—Ç. –≤ –∫–æ—Ä–∑–∏–Ω—É?",
        reply_markup=kb.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith(CONFIRM_ADD))
async def add_to_cart(callback: CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    parts = callback.data.split("_")
    try:
        product_id = int(parts[-1])
    except (IndexError, ValueError) as e:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback.data: {callback.data}, –æ—à–∏–±–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)
        return
    data = await state.get_data()
    quantity = data["quantity"]
    user_id = callback.from_user.id
    product = await api.catalog.get_product(product_id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    cart = await cart_service.get_cart(user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º cart_service
    cart.add_item(product, quantity)
    await cart_service.save_cart(user_id, cart)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º cart_service
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)
    await state.update_data(product_id=product_id)
    await show_product_details(callback, state)

@router.callback_query(F.data.startswith(PRODUCT_PREFIX))
async def show_product_details(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    parts = callback.data.split("_")
    try:
        product_id = int(parts[1])
    except (IndexError, ValueError):
        data = await state.get_data()
        product_id = data.get("product_id")
        if not product_id:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback.data –∏ –Ω–µ—Ç product_id –≤ state: {callback.data}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)
            return
    product = await api.catalog.get_product(product_id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"{ADD_TO_CART}{product.id}")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data=f"{SUBCATEGORY_PREFIX}{product.subcategory_id}")
    kb.adjust(1)
    image_url = product.image_url
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å URL: {image_url}")
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(image_url)
            response.raise_for_status()
            image_data = response.content
        except httpx.HTTPError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            image_data = None
    await state.update_data(product_id=product_id)
    await state.set_state(CatalogStates.viewing_product)
    await callback.message.delete()
    if image_data:
        photo = BufferedInputFile(file=image_data, filename="product_image.png")
        await callback.message.answer_photo(
            photo=photo,
            caption=f"üì¶ <b>{product.name}</b>\n\n{product.description}\n\nüí∞ –¶–µ–Ω–∞: {product.price} ‚ÇΩ",
            reply_markup=kb.as_markup(),
            parse_mode="HTML",
        )
    else:
        await callback.message.answer(
            text=f"üì¶ <b>{product.name}</b>\n\n{product.description}\n\nüí∞ –¶–µ–Ω–∞: {product.price} ‚ÇΩ\n\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
            reply_markup=kb.as_markup(),
            parse_mode="HTML",
        )
    await callback.answer()

@router.callback_query(F.data == BACK_TO_CATEGORIES)
async def back_to_categories(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    await show_categories(callback, state)

@router.callback_query(F.data == BACK_TO_SUBCATEGORIES)
async def back_to_subcategories(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    data = await state.get_data()
    category_id = data.get("category_id")
    if not category_id:
        await show_categories(callback, state)
        return
    await show_subcategories_helper(callback, state, category_id)

async def show_subcategories_helper(callback: CallbackQuery, state: FSMContext, category_id: int) -> None:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
        category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    subcategories = await api.catalog.get_subcategories(category_id)
    kb = InlineKeyboardBuilder()
    for subcategory in subcategories:
        kb.button(text=subcategory.name, callback_data=f"{SUBCATEGORY_PREFIX}{subcategory.id}")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=BACK_TO_CATEGORIES)
    kb.adjust(2)
    await state.update_data(category_id=category_id)
    await state.set_state(CatalogStates.viewing_subcategories)
    await callback.message.edit_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())
    await callback.answer()

@router.callback_query(F.data == BACK_TO_MAIN)
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.button(text="‚ùì FAQ", callback_data="faq")
    kb.adjust(2)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ:", reply_markup=kb.as_markup())
    await callback.answer()

@router.callback_query(F.data == "current_page")
async def handle_current_page(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ).

    Args:
        callback: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """
    await callback.answer("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=False)

def register_handlers(dp) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞.
    """
    dp.include_router(router)