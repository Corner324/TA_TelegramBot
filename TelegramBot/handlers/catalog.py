from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
from services.api_provider import api_client as api

router = Router()
logger = logging.getLogger(__name__)

class CatalogStates(StatesGroup):
    viewing_categories = State()
    viewing_subcategories = State()
    viewing_products = State()
    viewing_product = State()


# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è callback_data
CATEGORY_PREFIX = "category_"
SUBCATEGORY_PREFIX = "subcategory_"
PRODUCT_PREFIX = "product_"
PAGE_PREFIX = "page_"
BACK_TO_CATEGORIES = "back_to_categories"
BACK_TO_SUBCATEGORIES = "back_to_subcategories"
ADD_TO_CART = "add_to_cart_"
BACK_TO_MAIN = "main_menu"


@router.callback_query(F.data == "catalog")
async def show_categories(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
    categories = await api.get_categories()

    kb = InlineKeyboardBuilder()
    for category in categories:
        kb.button(text=category.name, callback_data=f"{CATEGORY_PREFIX}{category.id}")

    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=BACK_TO_MAIN)
    kb.adjust(2)

    await state.set_state(CatalogStates.viewing_categories)

    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=kb.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith(CATEGORY_PREFIX))
async def show_subcategories(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[1])
    await show_subcategories_helper(callback, state, category_id)


@router.callback_query(F.data.startswith(SUBCATEGORY_PREFIX))
async def show_products(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    subcategory_id = int(callback.data.split("_")[1])
    await _show_products_page(callback, state, subcategory_id, 1)


@router.callback_query(F.data.startswith(PAGE_PREFIX))
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    parts = callback.data.split("_")
    subcategory_id = int(parts[1])
    page = int(parts[2])
    await _show_products_page(callback, state, subcategory_id, page)


async def _show_products_page(
    callback: CallbackQuery, state: FSMContext, subcategory_id: int, page: int
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
    products_data = await api.get_products(subcategory_id, page=page, limit=5)
    products = products_data["products"]
    total_pages = products_data["pages"]

    kb = InlineKeyboardBuilder()

    for product in products:
        kb.button(
            text=f"{product.name} - {product.price} ‚ÇΩ",
            callback_data=f"{PRODUCT_PREFIX}{product.id}",
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row = []

    if page > 1:
        pagination_row.append(
            kb.button(text="‚óÄÔ∏è", callback_data=f"{PAGE_PREFIX}{subcategory_id}_{page-1}")
        )

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pagination_row.append(
        kb.button(text=f"{page}/{total_pages}", callback_data="current_page")
    )

    if page < total_pages:
        pagination_row.append(
            kb.button(text="‚ñ∂Ô∏è", callback_data=f"{PAGE_PREFIX}{subcategory_id}_{page+1}")
        )

    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=BACK_TO_SUBCATEGORIES)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    kb.adjust(1)  # –ü–æ –æ–¥–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É –≤ —Ä—è–¥

    await state.update_data(subcategory_id=subcategory_id)
    await state.set_state(CatalogStates.viewing_products)

    await callback.message.edit_text(
        f"üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Å—Ç—Ä. {page} –∏–∑ {total_pages}):",
        reply_markup=kb.as_markup(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith(PRODUCT_PREFIX))
async def show_product_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
    product_id = int(callback.data.split("_")[1])
    product = await api.get_product(product_id)

    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    kb = InlineKeyboardBuilder()
    kb.button(text=f"üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"{ADD_TO_CART}{product.id}")
    kb.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤",
        callback_data=f"{SUBCATEGORY_PREFIX}{product.subcategory_id}",
    )
    kb.adjust(1)

    await state.update_data(product_id=product_id)
    await state.set_state(CatalogStates.viewing_product)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    await callback.message.edit_text(
        f"üì¶ <b>{product.name}</b>\n\n"
        f"{product.description}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {product.price} ‚ÇΩ",
        reply_markup=kb.as_markup(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == BACK_TO_CATEGORIES)
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await show_categories(callback, state)


@router.callback_query(F.data == BACK_TO_SUBCATEGORIES)
async def back_to_subcategories(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    data = await state.get_data()
    category_id = data.get("category_id")

    if not category_id:
        await show_categories(callback, state)
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback_handler –Ω–∞–ø—Ä—è–º—É—é
    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é show_subcategories —Å category_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    subcategory_callback = (
        callback  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç, –Ω–æ –Ω–µ –º–µ–Ω—è–µ–º –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
    )
    await show_subcategories_helper(subcategory_callback, state, category_id)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
# –ö–æ–¥ —Å—é–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –∏–∑ show_subcategories
async def show_subcategories_helper(
    callback: CallbackQuery, state: FSMContext, category_id: int
):
    subcategories = await api.get_subcategories(category_id)

    kb = InlineKeyboardBuilder()
    for subcategory in subcategories:
        kb.button(
            text=subcategory.name, callback_data=f"{SUBCATEGORY_PREFIX}{subcategory.id}"
        )

    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=BACK_TO_CATEGORIES)
    kb.adjust(2)

    await state.update_data(category_id=category_id)
    await state.set_state(CatalogStates.viewing_subcategories)

    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == BACK_TO_MAIN)
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    kb = InlineKeyboardBuilder()
    kb.button(text="üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.button(text="‚ùì FAQ", callback_data="faq")
    kb.adjust(2)

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ:",
        reply_markup=kb.as_markup(),
    )
    await callback.answer()


@router.callback_query(F.data == "current_page")
async def handle_current_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    await callback.answer("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=False)


@router.callback_query(F.data.startswith(ADD_TO_CART))
async def add_to_cart(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product_id = int(callback.data.split("_")[1])
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É, –∫–æ—Ç–æ—Ä—É—é —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)


def register_handlers(dp):
    dp.include_router(router)
