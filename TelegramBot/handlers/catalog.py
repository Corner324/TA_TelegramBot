from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import logging
import httpx
from services.api_provider import api_provider as api
from config import API_URL

router = Router()
logger = logging.getLogger(__name__)


class CatalogStates(StatesGroup):
    viewing_categories = State()
    viewing_subcategories = State()
    viewing_products = State()
    viewing_product = State()


CATEGORY_PREFIX = "category_"
SUBCATEGORY_PREFIX = "subcategory_"
PRODUCT_PREFIX = "product_"
PAGE_PREFIX = "page_"
BACK_TO_CATEGORIES = "back_to_categories"
BACK_TO_SUBCATEGORIES = "back_to_subcategories"
ADD_TO_CART = "add_to_cart_"
BACK_TO_MAIN = "main_menu"


@router.message(Command("catalog"))
async def catalog_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog"""
    categories = await api.catalog.get_categories()
    kb = InlineKeyboardBuilder()
    for category in categories:
        kb.button(text=category.name, callback_data=f"{CATEGORY_PREFIX}{category.id}")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=BACK_TO_MAIN)
    kb.adjust(2)

    await state.set_state(CatalogStates.viewing_categories)
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=kb.as_markup())


@router.callback_query(F.data == "catalog")
async def show_categories(callback: CallbackQuery, state: FSMContext):
    categories = await api.catalog.get_categories()
    kb = InlineKeyboardBuilder()
    for category in categories:
        kb.button(text=category.name, callback_data=f"{CATEGORY_PREFIX}{category.id}")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=BACK_TO_MAIN)
    kb.adjust(2)
    await state.set_state(CatalogStates.viewing_categories)
    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=kb.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith(CATEGORY_PREFIX))
async def show_subcategories(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    await show_subcategories_helper(callback, state, category_id)


@router.callback_query(F.data.startswith(SUBCATEGORY_PREFIX))
async def show_products(callback: CallbackQuery, state: FSMContext):
    subcategory_id = int(callback.data.split("_")[1])
    await _show_products_page(callback, state, subcategory_id, 1)

@router.callback_query(F.data.startswith(PAGE_PREFIX))
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    subcategory_id = int(parts[1])
    page = int(parts[2])
    await _show_products_page(callback, state, subcategory_id, page)

async def _show_products_page(
    callback: CallbackQuery, state: FSMContext, subcategory_id: int, page: int
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
    products_data = await api.catalog.get_products(subcategory_id, page=page, limit=5)
    products = products_data["products"]
    total_pages = products_data["pages"]

    kb = InlineKeyboardBuilder()
    for product in products:
        kb.button(
            text=f"{product.name} - {product.price} ‚ÇΩ",
            callback_data=f"{PRODUCT_PREFIX}{product.id}",
        )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if page > 1:
        kb.button(text="‚óÄÔ∏è", callback_data=f"{PAGE_PREFIX}{subcategory_id}_{page-1}")
    kb.button(text=f"{page}/{total_pages}", callback_data="current_page")
    if page < total_pages:
        kb.button(text="‚ñ∂Ô∏è", callback_data=f"{PAGE_PREFIX}{subcategory_id}_{page+1}")

    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=BACK_TO_SUBCATEGORIES)
    kb.adjust(1)

    await state.update_data(subcategory_id=subcategory_id)
    await state.set_state(CatalogStates.viewing_products)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback.message.delete()
    await callback.message.answer(
        f"üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Å—Ç—Ä. {page} –∏–∑ {total_pages}):",
        reply_markup=kb.as_markup(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith(PRODUCT_PREFIX))
async def show_product_details(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])
    product = await api.catalog.get_product(product_id)

    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"{ADD_TO_CART}{product.id}")
    kb.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤",
        callback_data=f"{SUBCATEGORY_PREFIX}{product.subcategory_id}",
    )
    kb.adjust(1)

    image_url = product.image_url
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å URL: {image_url}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±—ç–∫–µ–Ω–¥–∞
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(image_url)
            response.raise_for_status()
            image_data = response.content
        except httpx.HTTPError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            image_data = None  # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç

    await state.update_data(product_id=product_id)
    await state.set_state(CatalogStates.viewing_product)

    await callback.message.delete()
    if image_data:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ BufferedInputFile
        photo = BufferedInputFile(file=image_data, filename="product_image.png")
        await callback.message.answer_photo(
            photo=photo,  # –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–∫—Ç BufferedInputFile
            caption=f"üì¶ <b>{product.name}</b>\n\n"
            f"{product.description}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {product.price} ‚ÇΩ",
            reply_markup=kb.as_markup(),
            parse_mode="HTML",
        )
    else:
        await callback.message.answer(
            text=f"üì¶ <b>{product.name}</b>\n\n"
            f"{product.description}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {product.price} ‚ÇΩ\n\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
            reply_markup=kb.as_markup(),
            parse_mode="HTML",
        )
    await callback.answer()


@router.callback_query(F.data == BACK_TO_CATEGORIES)
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    await show_categories(callback, state)


@router.callback_query(F.data == BACK_TO_SUBCATEGORIES)
async def back_to_subcategories(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category_id = data.get("category_id")
    if not category_id:
        await show_categories(callback, state)
        return
    await show_subcategories_helper(callback, state, category_id)


async def show_subcategories_helper(
    callback: CallbackQuery, state: FSMContext, category_id: int
):
    subcategories = await api.catalog.get_subcategories(category_id)
    kb = InlineKeyboardBuilder()
    for subcategory in subcategories:
        kb.button(
            text=subcategory.name, callback_data=f"{SUBCATEGORY_PREFIX}{subcategory.id}"
        )
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=BACK_TO_CATEGORIES)
    kb.adjust(2)

    await state.update_data(category_id=category_id)
    await state.set_state(CatalogStates.viewing_subcategories)

    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == BACK_TO_MAIN)
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text="üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.button(text="‚ùì FAQ", callback_data="faq")
    kb.adjust(2)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ:",
        reply_markup=kb.as_markup(),
    )
    await callback.answer()


@router.callback_query(F.data == "current_page")
async def handle_current_page(callback: CallbackQuery):
    await callback.answer("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=False)


@router.callback_query(F.data.startswith(ADD_TO_CART))
async def add_to_cart(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)


def register_handlers(dp):
    dp.include_router(router)
