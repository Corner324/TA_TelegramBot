from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from config import REQUIRED_CHANNEL_ID, REQUIRED_GROUP_URL, REQUIRED_GROUP_ID

router = Router()
logger = logging.getLogger(__name__)  # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è


async def check_subscription(bot: Bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        channel_member = await bot.get_chat_member(REQUIRED_CHANNEL_ID, user_id)
        channel_status = channel_member.status
       
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
        group_member = await bot.get_chat_member(REQUIRED_GROUP_ID, user_id)
        group_status = group_member.status

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –æ–±–æ–∏—Ö
        valid_statuses = ["member", "administrator", "creator"]
        is_valid = channel_status in valid_statuses and group_status in valid_statuses
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {is_valid}, user_id: {user_id}")
        return is_valid

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}, user_id: {user_id}")
        return False


@router.message(CommandStart())
async def start_handler(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã
    is_subscribed = await check_subscription(bot, message.from_user.id)

    if not is_subscribed:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã
        kb = InlineKeyboardBuilder()
        kb.button(
            text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
            url=f"https://t.me/c/{str(REQUIRED_CHANNEL_ID).replace('-100', '')}",
        )
        kb.button(
            text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É", url=f"https://t.me/{REQUIRED_GROUP_URL}"
        )
        kb.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
        kb.adjust(2, 1)

        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –≥—Ä—É–ø–ø—É.\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.",
            reply_markup=kb.as_markup(),
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    kb = InlineKeyboardBuilder()
    kb.button(text="üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.button(text="‚ùì FAQ", callback_data="faq")
    kb.adjust(2)

    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ:",
        reply_markup=kb.as_markup(),
    )


@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    is_subscribed = await check_subscription(bot, callback.from_user.id)

    if not is_subscribed:
        await callback.answer(
            "–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã", show_alert=True
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    kb = InlineKeyboardBuilder()
    kb.button(text="üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.button(text="‚ùì FAQ", callback_data="faq")
    kb.adjust(2)

    await callback.message.edit_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É, {callback.from_user.first_name}!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ:",
        reply_markup=kb.as_markup(),
    )
    await callback.answer()


def register_handlers(dp):
    dp.include_router(router)
